# Copyright (C) 2024-2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
---
- name: Deploy Observability
  hosts: "{{ inference_delegate | default('kube_control_plane') }}"
  gather_facts: false
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env | default(env_proxy | default({})) }}"
  vars_files:        
    - "{{ lookup('env', 'PWD') }}/config/vars/inference_common.yml"
    - "{{ lookup('env', 'PWD') }}/config/vars/inference_observability.yml"
    - "{{ lookup('env', 'PWD') }}/config/vault.yml"   
  roles:
    - role: inference-tools
  tasks:    
    - name: Create kubernetes namespace for Observability
      community.kubernetes.k8s:
        name: observability
        api_version: v1
        kind: Namespace
        state: present
      run_once: true
      tags: always
    - name: Add Observability repository
      community.kubernetes.helm_repository:
        name: prometheus-community
        repo_url: https://prometheus-community.github.io/helm-charts
      tags: deploy_observability
    - name: Transfer Dependency files
      ansible.builtin.copy:
        src: "{{ helm_charts_base }}/observability/"
        dest: "{{ remote_helm_charts_base }}/"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        remote_src: no          
      tags: always
    - name: Verify Observability repository
      ansible.builtin.command: helm repo list
      register: helm_repo_list_observability
      failed_when: false
      changed_when: false      
      tags: always
    - name: Synchronize Observability repositories
      ansible.builtin.shell: helm repo update
      when: helm_repo_list_observability.stdout != ""     
      tags: always
    - name: Create Config for Gaudi Grafana Dashboard
      run_once: true
      tags: deploy_observability
      ansible.builtin.shell: |
        kubectl create configmap habana-dashboard-configmap \
          --from-file=habana-dashboard.json={{ remote_helm_charts_base }}/habana-exporter/grafana-gaudi-dashboard.json \
          -n observability --dry-run=client -o yaml | kubectl apply -f -

        kubectl label configmap habana-dashboard-configmap grafana_dashboard=1 -n observability --overwrite
      args:
        executable: /bin/bash


    - name: Create Config for Gaudi Cluster Utilization Dashboard
      tags: deploy_observability
      run_once: true
      ansible.builtin.shell: |
        kubectl create configmap habana-cluster-dashboard-configmap \
          --from-file=habana-cluster-dashboard.json={{ remote_helm_charts_base }}/habana-exporter/grafana-gaudi-cluster-util.json \
          -n observability --dry-run=client -o yaml | kubectl apply -f -

        kubectl label configmap habana-cluster-dashboard-configmap grafana_dashboard=1 -n observability --overwrite
      args:
        executable: /bin/bash
      
    - name: Create Config for Xeon Grafana Dashboard
      tags: deploy_observability
      run_once: true
      ansible.builtin.shell: |
        kubectl create configmap xeon-dashboard-configmap \
          --from-file=grafana-xeon-dashboard.json={{ remote_helm_charts_base }}/xeon-exporter/grafana-xeon-dashboard.json \
          -n observability --dry-run=client -o yaml | kubectl apply -f -

        kubectl label configmap xeon-dashboard-configmap grafana_dashboard=1 -n observability --overwrite
      args:
        executable: /bin/bash

    - name: Install Observability Stack
      tags: deploy_observability
      community.kubernetes.helm:
        name: observability
        chart_ref: prometheus-community/kube-prometheus-stack
        release_namespace: observability
        create_namespace: true
        chart_version: "72.5.1"                  
        values:
          kubeEtcd:
            enabled: false
          prometheus:
            prometheusSpec:
              retention: 15d
              storageSpec:
                volumeClaimTemplate:
                  spec:
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 10Gi                    
              replicas: 2
              replicaAutoScaling:
                enabled: true
                targetCPUUtilizationPercentage: 80
                maxReplicas: 5
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                            - key: app.kubernetes.io/name
                              operator: In
                              values:
                                - prometheus
                        topologyKey: kubernetes.io/hostname         
          alertmanager:
            alertmanagerSpec:
              storage:
                volumeClaimTemplate:
                  spec:
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 2Gi                     
          grafana:                                 
            sidecar:
              dashboards:
                enabled: true
                label: grafana_dashboard
                folder: /tmp/dashboards 
            persistence:
                enabled: true
                accessModes:
                  - ReadWriteOnce
                size: 10Gi                
            grafana.ini:                                                                            
              users:
                default_theme: light                
              server:                
                root_url: "%(protocol)s://%(domain)s:%(http_port)s/observability"                
                serve_from_sub_path: true
                domain: "{{ secret_name }}"
      register: prometheus_install
      until: prometheus_install is successful
      retries: 5
      delay: 10
      run_once: true
    - name: Create TLS cert for observability
      tags: deploy_observability
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
            namespace: observability  # Change this to the desired namespace if not default
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ lookup('file', cert_file) | b64encode }}"
            tls.key: "{{ lookup('file', key_file) | b64encode }}"
      register: kubectl_output      
    
    - name: Create Grafana observability ingress
      tags: deploy_observability
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: HTTP  # Assuming Grafana is served over HTTP              
            name: observability-grafana-ingress
            namespace: observability  # Change this to the namespace where Grafana is deployed
          spec:
            ingressClassName: nginx
            rules:
            - host: "{{ secret_name }}"  # Replace with your desired hostname for Grafana
              http:
                paths:
                - backend:
                    service:
                      name: observability-grafana
                      port:
                        number: 80  
                  path: /observability(/|$)(.*)
                  pathType: ImplementationSpecific
            tls:
            - hosts:
              - "{{ secret_name }}"
              secretName: "{{ secret_name }}" 
    - name: Add Bitnami Helm repository
      tags: deploy_logging
      community.kubernetes.helm_repository:
        name: bitnami
        repo_url: https://charts.bitnami.com/bitnami
      when: deploy_logging == "yes"
    
    - name: Check if Helm repositories exist Observability
      ansible.builtin.command: helm repo list
      register: helm_repo_list_observability
      failed_when: false
      changed_when: false   
      when: deploy_logging == "yes"   
      tags: deploy_logging
    
    - name: Update Helm repositories
      ansible.builtin.shell: helm repo update
      when:
        - deploy_logging == "yes"
        - helm_repo_list_observability.stdout != ""
      tags: deploy_logging
    
    - name: Install Elasticsearch System
      community.kubernetes.helm:
        name: logging-elasticsearch
        chart_ref: bitnami/elasticsearch
        release_namespace: observability
        chart_version: "21.4.8"
        values:
          name: elasticsearch
          master.replicas: 3
          coordinating.service.type: LoadBalancer
      run_once: true
      when: deploy_logging == "yes"
      tags: deploy_logging
    
    - name: Create Fluentbit Group
      group:
        name: fluentbit
        state: present
      when: deploy_logging == "yes"
      tags: deploy_logging

    - name: Create Fluentbit User
      user:
        name: fluentbit
        groups: fluentbit
      when: deploy_logging == "yes"
      tags: deploy_logging

    - name: Set Ownership of log Directories
      file:
        path: "{{ item }}"
        owner: root
        group: fluentbit
        mode: 0750
      loop:
        - /var/log/pods
        - /var/log/containers    
      when: deploy_logging == "yes"
      tags: deploy_logging

    - name: Transfer Dependency Files
      ansible.builtin.copy:
        src: "{{ helm_charts_base }}/"
        dest: "{{ remote_helm_charts_base }}/"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        remote_src: no
      when: deploy_logging == "yes"
      tags: deploy_logging

    - name: Create Fluent Bit ClusterRoleBinding
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: fluent-bit-binding-observability
          subjects:
            - kind: ServiceAccount
              name: fluent-bit
              namespace: observability
          roleRef:
            kind: ClusterRole
            name: fluent-bit
            apiGroup: rbac.authorization.k8s.io
      when: deploy_logging == "yes"
      tags: deploy_logging
    
    - name: Install Fluent Bit
      community.kubernetes.helm:
        name: logging-fluentbit
        chart_ref: oci://registry-1.docker.io/bitnamicharts/fluent-bit
        release_namespace: observability
        values_files: "{{ remote_helm_charts_base }}/fluentbit/fluebit-values.yml"
        chart_version: "2.5.5"
      run_once: true
      when: deploy_logging == "yes"
      tags: deploy_logging

    - name: Update Fluent Bit ConfigMap
      community.kubernetes.k8s:
        state: present
        src: "{{ remote_helm_charts_base }}/fluentbit/fluentbit-config.yml"
        kind: ConfigMap
        namespace: observability
      run_once: true
      when: deploy_logging == "yes"
      tags: deploy_logging

    - name: Apply Changes to Fluentbit Deployment
      ansible.builtin.command:
        cmd: kubectl rollout restart deployment/logging-fluentbit-fluent-bit --namespace=observability
      run_once: true
      when: deploy_logging == "yes"
      tags: deploy_logging

    - name: Add Grafana Helm repo (Loki)
      run_once: true
      tags: deploy_observability
      community.kubernetes.helm_repository:
        name: grafana
        repo_url: https://grafana.github.io/helm-charts

    - name: Add OpenTelemetry Helm repo
      run_once: true
      tags: deploy_observability
      community.kubernetes.helm_repository:
        name: open-telemetry
        repo_url: https://open-telemetry.github.io/opentelemetry-helm-charts

    - name: Transfer Dependency Files
      ansible.builtin.copy:
        src: "{{ helm_charts_base }}/"
        dest: "{{ remote_helm_charts_base }}/"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        remote_src: no
      tags: always

    - name: Build chart dependencies for logs-stack chart
      run_once: true
      tags: deploy_observability
      ansible.builtin.command:
        cmd: helm dependency build logs-stack
      args:
        chdir: "{{ remote_helm_charts_base }}/observability"
      become: false

    - name: Install/Upgrade logs-stack chart with AWS settings
      when: aws_access_key | length > 0
      run_once: true
      tags: deploy_observability
      ansible.builtin.command:
        cmd: >
          helm upgrade --install logs-stack ./logs-stack
          --namespace observability
          -f {{ remote_helm_charts_base }}/observability/logs-stack/aws-s3-values.yaml
          --set loki.loki.storage_config.aws.region={{ aws_region }}
          --set loki.loki.storage_config.aws.bucketnames={{ aws_bucket }}
          --set loki.loki.storage_config.aws.access_key_id={{ aws_access_key }}
          --set loki.loki.storage_config.aws.secret_access_key={{ aws_secret_key }}
          --set loki.loki.storage.bucketNames.chunks={{ aws_bucket }}
          --set loki.loki.storage.bucketNames.admin={{ aws_bucket }}
          --set loki.loki.storage.bucketNames.ruler={{ aws_bucket }}
      args:
        chdir: "{{ remote_helm_charts_base }}/observability"
      register: logs_install
      until: logs_install is successful
      retries: 5
      delay: 10

    - name: Install/Upgrade logs-stack chart with Minio settings
      when: aws_access_key | length == 0
      run_once: true
      tags: deploy_observability
      ansible.builtin.command:
        cmd: >
          helm upgrade --install logs-stack ./logs-stack
          --namespace observability
      args:
        chdir: "{{ remote_helm_charts_base }}/observability"
      register: logs_install
      until: logs_install is successful
      retries: 5
      delay: 10

    - name: Check if Gaudi Nodes are Available
      shell: "kubectl get nodes -l habana.ai/device.family=gaudi --no-headers | wc -l"
      register: gaudi_node_count
      changed_when: false
      tags: deploy_observability

    - name: Set Fact if Gaudi Nodes are Available
      set_fact:
        gaudi_available: "{{ gaudi_node_count.stdout | int > 0 }}"
      tags: deploy_observability

    - name: Transfer Dependency files
      ansible.builtin.copy:
        src: "{{ helm_charts_base }}/observability/habana-exporter"
        dest: "{{ remote_helm_charts_base }}/"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        remote_src: no
      when: gaudi_available     
      tags: deploy_observability  
              
    - name: Apply Habana Metrics Service Monitor
      community.kubernetes.k8s:
        state: present        
        src: "{{ remote_helm_charts_base }}/habana-exporter/habana-metrics.yml"
      when: gaudi_available
      tags: deploy_observability
      

    
