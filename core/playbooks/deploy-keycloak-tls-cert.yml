# Copyright (C) 2024-2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
---
- name: Create Keycloak TLS secret
  hosts: "{{ inference_delegate | default('kube_control_plane') }}"
  gather_facts: false
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env | default(env_proxy | default({})) }}"
  vars_files:
    - "{{ lookup('env', 'PWD') }}/config/vars/inference_common.yml"
    - "{{ lookup('env', 'PWD') }}/config/vars/inference_keycloak_apisix.yml"
  roles:
    - role: inference-tools
  tasks:    
    - name: Create Namespace for APISIX
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: auth-apisix      
    - name: Output variable values
      debug:
        var: cert_file, key_file, secret_name    
    - name: Create TLS secret for Keycloak
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
            namespace: default  # Change this to the desired namespace if not default
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ lookup('file', cert_file) | b64encode }}"
            tls.key: "{{ lookup('file', key_file) | b64encode }}"
      register: kubectl_output
    - name: Create TLS secret for Keycloak in APISIX namespace
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
            namespace: auth-apisix  # Change this to the desired namespace if not default
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ lookup('file', cert_file) | b64encode }}"
            tls.key: "{{ lookup('file', key_file) | b64encode }}"
      register: kubectl_output    
      when: deploy_apisix == "yes"
    - name: Display the output
      debug:
        msg: "Secret {{ secret_name }} created."            
    - name: Retrieve number of Inference Infrastructure Nodes
      ansible.builtin.shell: kubectl get nodes --selector=node-role.kubernetes.io/inference-infra=true --no-headers | wc -l
      register: inference_node_count
      changed_when: false
    - name: Set Keycloak Replicas based upon Inference Infra Nodes
      set_fact:
        inference_infra_replica_count: "{{ inference_node_count.stdout | int if inference_node_count.stdout | int > 0 else 1 }}"
    - name: Display the number of Inference Infrastructure Nodes
      debug:
        msg: "Number of inference-infra node configured: {{ inference_infra_replica_count }}"  
      run_once: true
      when: deploy_keycloak == "yes"
    - name: Delete genai-gateway-ingress resource
      kubernetes.core.k8s:
        state: absent
        kind: Ingress
        name: genai-gateway-ingress
        namespace: genai-gateway        
    
    - name: Deploy Keycloak System
      run_once: true
      register: helm_output
      when: deploy_keycloak == "yes"
      community.kubernetes.helm:
        name: keycloak
        chart_ref: oci://registry-1.docker.io/bitnamicharts/keycloak
        release_namespace: default  # Set the namespace where Keycloak will be installed
        create_namespace: true
        chart_version: "22.1.0"        
        values:
          production: true
          proxy: edge          
          replicaCount: "{{ inference_infra_replica_count | int }}"
          extraEnvVars:
          - name: KC_CACHE
            value: ispn
          - name: KC_CACHE_STACK
            value: kubernetes
          auth:
            adminUser: "{{ keycloak_admin_user }}"
            adminPassword: "{{ keycloak_admin_password }}"
          metrics:
            enabled: true                      
          autoscaling:
            enabled: true
            minReplicas: "{{ inference_infra_replica_count | int }}"
            maxReplicas: "{{ (inference_infra_replica_count | int * 3) }}"
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  targetAverageUtilization: 60
              - type: Resource
                resource:
                  name: memory
                  targetAverageUtilization: 60 
          ingress:
            enabled: true
            hostname: "{{ secret_name }}"
            tls: true
            ingressClassName: "nginx"
            proxyAddressForwarding: true
            annotations:
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/proxy-body-size: "10m"
            extraTls:
              - hosts:
                  - "{{ secret_name }}"
                secretName: "{{ secret_name }}"           
          tolerations:
            - key: "node-role.kubernetes.io/control-plane"
              operator: "Exists"
              effect: "NoSchedule"
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  preference:
                    matchExpressions:
                      - key: node-role.kubernetes.io/inference-infra
                        operator: In
                        values:
                          - "true"
                - weight: 50
                  preference:
                    matchExpressions:
                      - key: node-role.kubernetes.io/control-plane
                        operator: Exists
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    labelSelector:
                      matchLabels:
                        app: keycloak
                    topologyKey: "kubernetes.io/hostname"
    - name: Verify Keycloak StatefulSet readiness
      community.kubernetes.k8s_info:
        kind: StatefulSet
        namespace: default
        name: keycloak
      register: keycloak_statefulset
      until: >
        keycloak_statefulset.resources[0].status.readyReplicas is defined and
        keycloak_statefulset.resources[0].status.readyReplicas == keycloak_statefulset.resources[0].spec.replicas
      retries: 60
      delay: 10
      changed_when: false
      when: deploy_keycloak == "yes"
    - name: Wait for Keycloak pods to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: keycloak
        label_selectors:
          - app=keycloak
      register: keycloak_pods
      until:
        - keycloak_pods.resources | map('select', 'status.phase') | select('equalto', 'Running') | list | length == keycloak_pods.resources | length
        - keycloak_pods.resources | map('select', 'status.containerStatuses') | sum(attribute='ready', start=0) == keycloak_pods.resources | length
      retries: 60
      delay: 5
      when: deploy_keycloak == "yes"

    - name: Ensure Remote Directory Exists
      ansible.builtin.file:
        path: "{{ remote_helm_charts_base }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"    
      tags: always
    - name: Sync dependency files to Deployment Nodes
      ansible.posix.synchronize:
        src: "{{ item.src }}/"
        dest: "{{ item.dest }}/"
        recursive: yes
        delete: no
        mode: push
      loop:
        - { src: "{{ helm_charts_base }}", dest: "{{ remote_helm_charts_base }}/" }
        - { src: "{{ remote_home_dir }}", dest: "{{ remote_helm_charts_base }}/" }
      tags: always                    
    - name: Ensure Keycloak Realm Creation script is executable
      file:
        path: "{{ remote_helm_charts_base }}/keycloak-realmcreation.sh"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"                      
    - name: Synchronize dependencies for APISIX
      ansible.builtin.command: helm dependency update "{{ remote_helm_charts_base }}/apisix-helm/"
      register: helm_dependency_update
      failed_when: helm_dependency_update.rc != 0
      when: deploy_apisix == "yes"
    - name: Synchronize dependencies for APISIX
      community.kubernetes.helm:
        name: auth-apisix
        chart_ref: "{{ remote_helm_charts_base }}/apisix-helm/"
        update_repo_cache: yes
        release_namespace: auth-apisix
      run_once: true
      when: deploy_apisix == "yes"            
    - name: Deploy APISIX System
      command: >
          helm upgrade --install auth-apisix {{ remote_helm_charts_base }}/apisix-helm/
          --values {{ remote_helm_charts_base }}/apisix-helm/values.yaml
          --set apisix.replicaCount={{ inference_infra_replica_count }}
          --set apisix.ingress-controller.replicaCount={{ inference_infra_replica_count }} 
          --set apisix.etcd.replicaCount={{ inference_infra_replica_count }}          
          --namespace auth-apisix --create-namespace          
      when: deploy_apisix == "yes"
      run_once: true
    - name: Wait for APISIX pods to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: auth-apisix
        label_selectors:
          - app.kubernetes.io/instance=auth-apisix
      register: apisix_pods
      until:
        - apisix_pods.resources | length > 0
        - apisix_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length == apisix_pods.resources | length
        - apisix_pods.resources | map(attribute='status.containerStatuses') | flatten | selectattr('ready', 'equalto', true) | list | length == (apisix_pods.resources | map(attribute='status.containerStatuses') | flatten | list | length)
      retries: 60
      delay: 10
      changed_when: false
      when: deploy_apisix == "yes"
    - name: Print Model List to be Deployed
      debug:
        var: model_name_list
    - name: Upgrade Keycloak with TLS and Ingress Configurations
      command: >
        helm upgrade --install keycloak-apisix "{{ remote_helm_charts_base }}/keycloak"
        --namespace default
        --set keycloakTokenRoute.host={{ secret_name }}
        --set keycloakTokenRoute.path=/token
        --set keycloakTokenRoute.serviceName=keycloak
        --set keycloakTokenRoute.servicePort=80
        --set keycloakTokenRoute.rewritePath=/realms/master/protocol/openid-connect/token
        --set tls.host={{ secret_name }}
        --set tls.secretName={{ secret_name }}
        --set tls.secretNamespace=default
        --set ingress.host={{ secret_name }}
        --set ingress.serviceName=auth-apisix-gateway
        --set ingress.servicePort=80
        --set ingress.secretName={{ secret_name }}
      environment:
        secret_name: "{{ secret_name }}"
      run_once: true
      register: keycloak_ingress_register_msg_in
      failed_when: keycloak_ingress_register_msg_in.rc != 0
      when: deploy_keycloak == "yes"                  
    - name: Execute the Keycloak Realm Creation Script
      command: "{{ remote_helm_charts_base }}/keycloak-realmcreation.sh {{ secret_name }} {{ keycloak_admin_user }} {{ keycloak_admin_password }} {{ keycloak_client_id }}"
      register: script_output
      run_once: true
      environment:
        http_proxy: ""
        https_proxy: ""
        no_proxy: ""
      when: deploy_keycloak == "yes"
    - name: Set client_secret fact
      set_fact:
        client_secret: "{{ script_output.stdout | regex_search('Client secret: (.*)') | join('') | regex_replace('^Client secret: ') }}"
      when:
        - script_output is defined
        - script_output.stdout is defined
        - script_output.stdout is search('Client secret:')
        - deploy_keycloak == "yes"
      run_once: true
    - debug:
        msg: "The client secret is: {{ client_secret }}"
      run_once: true
      when: deploy_keycloak == "yes"
    - name: Print the script output
      debug:
        msg: "{{ script_output.stdout }}"    
      run_once: true
      when: deploy_keycloak == "yes"
    - name: Remove any existing deployment directory
      ansible.builtin.file:
        path: "{{ remote_helm_charts_base }}"
        state: absent
